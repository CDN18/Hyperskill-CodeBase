type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {
        final String[] script = new String[]{
                "file-formats",
                "menu"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) throws IOException {
            return new Scenario(script).check();
        }

    }
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/Corpus.java
  visible: true
  text: |
    package animals;

    import java.util.List;

    public class Corpus {

        // Greetings and goodbyes

        static List<String> morningGreetings = List.of(
                "Good morning!", "Top of the morning to you!",
                "Morning!"
        );

        static List<String> afternoonGreetings = List.of(
                "Good afternoon!", "Afternoon!"
        );

        static List<String> eveningGreetings = List.of(
                "Good evening!", "Evening!"
        );

        static List<String> earlyMorningGreetings = List.of(
                "Good early morning!", "Early morning!",
                "Morning, early bird!"
        );

        static List<String> lateNightGreetings = List.of(
                "Hi, Night Owl!"
        );

        static List<String> goodbye = List.of(
                "Goodbye!", "See you later!", "Bye!",
                "Have a good day!", "See you soon!"
        );


        // Questions and answers

        static List<String> positiveResponse = List.of(
                "y", "yes", "yeah", "yep", "sure", "right",
                "affirmative", "correct", "indeed", "you bet", "exactly",
                "you said it", "you're right"
        );

        static List<String> negativeResponse = List.of(
                "n", "no", "no way", "nah", "nope",
                "negative", "I don't think so", "yeah no", "you're wrong", "you said it wrong"
        );

        static List<String> askToClarify = List.of(
                "I'm not sure I caught you: was it yes or no?",
                "Funny, I still don't understand, is it yes or no?",
                "Oh, it's too complicated for me: just tell me yes or no.",
                "Could you please simply say yes or no?",
                "Oh, no, don't try to confuse me: say yes or no."
        );

        // Reply
        static List<String> positiveReply = List.of(
                "Wonderful!", "Nice!", "Great!", "Good!");

        static List<String> negativeReply = List.of("I give up.");

        //Methods

        public static String getCorpus(List<String> list) {
            return list.get((int) (Math.random() * list.size()));
        }

        public static String getCorpus(List<String> list, int index) {
            return list.get(index);
        }

    }
  learner_created: true
- name: src/animals/Animal.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonTypeName;

    import java.io.Serializable;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonTypeName("Animal")
    public class Animal implements AnimalTreeNode, Serializable {
        String name;
        String undefinedArticle;
        // Fact fact;
        boolean factIsTrue;

        @JsonIgnore
        AnimalTreeNode parent;
        AnimalTreeNode leftChild;
        AnimalTreeNode rightChild;

        public Animal(String nameInput) {
            nameInput = nameInput.strip().toLowerCase();
            this.name = parseAnimal(nameInput).split(" ")[1];
            this.undefinedArticle = parseAnimal(nameInput).split(" ")[0];
            // this.fact = new Fact();
        }

        public Animal() {
        }

        /*
        public void setFact(Fact fact) {
            this.fact = fact;
        }
         */

        static String parseAnimal(String input) {
            if (input.startsWith("a ") || input.startsWith("an ")) {
                return input;
            }
            if (input.startsWith("the ")) {
                input = input.replaceFirst("the ", "");
            }
            boolean startWithVowel = String.valueOf(input.charAt(0)).matches("[aeiou]");
            String undefinedArticle = startWithVowel ? "an" : "a";
            return undefinedArticle + " " + input;
        }

        @Override
        public String toString() {
            return this.undefinedArticle + " " + this.name;
        }

        @Override @JsonIgnore
        public AnimalTreeNode getParent() {
            return parent;
        }

        @Override @JsonIgnore
        public AnimalTreeNode getLeft() {
            return leftChild;
        }

        @Override @JsonIgnore
        public AnimalTreeNode getRight() {
            return rightChild;
        }

        @Override
        public void setParent(AnimalTreeNode parent) {
            this.parent = parent;
        }

        @Override
        public void setLeft(AnimalTreeNode left) {
            this.leftChild = left;
        }

        @Override
        public void setRight(AnimalTreeNode right) {
            this.rightChild = right;
        }

    }
  learner_created: true
- name: src/animals/Fact.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonTypeName;

    import javax.xml.namespace.QName;
    import java.io.Serializable;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonTypeName("Fact")
    public class Fact implements AnimalTreeNode, Serializable {
        String fact;
        String predicate;

        @JsonIgnore
        AnimalTreeNode parent;
        AnimalTreeNode leftChild; //The fact is false
        AnimalTreeNode rightChild; // The fact is true

        public Fact(String factString) {
            this.fact = turnFactToTrue(factString);
            Pattern predicatePattern = Pattern.compile("(can|has|is)");
            Matcher predicateMatcher = predicatePattern.matcher(fact);
            this.predicate = predicateMatcher.find() ? predicateMatcher.group() : "";
            // this.factIsTrue = factString.contains(this.predicate);
        }

        public Fact() {
        }

        @JsonIgnore
        public String getPredicateNegation() {
            switch (predicate) {
                case "can":
                    return  "can't";
                case "has":
                    return "doesn't have";
                case "is":
                    return "isn't";
                default:
                    return "";
            }
        }

        static String turnFactToTrue(String fact) {
            String trueFact = fact.strip();
            if (fact.contains("isn't") || fact.contains("is not")) {
                trueFact = fact.replaceFirst("isn't", "is").replaceFirst("is not", "is");
            }
            if (fact.contains("can't") || fact.contains("can not")) {
                trueFact = fact.replaceFirst("can't", "can").replaceFirst("can not", "can");
            }
            if (fact.contains("don't have") || fact.contains("doesn't have") ||
                    fact.contains("have not") || fact.contains("has not")) {
                trueFact = fact.replaceFirst("(don't|doesn't|do not|does not) have", "have")
                        .replaceFirst("have not", "have").replaceFirst("has not", "has");
            }
            return trueFact;
        }

        @JsonIgnore
        public String getFactPhrase() {
            return fact.replaceFirst("It (can|has|is)", "").strip();
        }

        @Override
        public AnimalTreeNode getParent() {
            return this.parent;
        }

        @Override @JsonIgnore
        public AnimalTreeNode getLeft() {
            return this.leftChild;
        }

        @Override @JsonIgnore
        public AnimalTreeNode getRight() {
            return this.rightChild;
        }

        @Override
        public void setParent(AnimalTreeNode parent) {
            this.parent = parent;
        }

        @Override
        public void setLeft(AnimalTreeNode left) {
            this.leftChild = left;
        }

        @Override
        public void setRight(AnimalTreeNode right) {
            this.rightChild = right;
        }

    }
  learner_created: true
- name: src/animals/AnimalTreeNode.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonSubTypes;
    import com.fasterxml.jackson.annotation.JsonTypeInfo;

    @JsonTypeInfo( use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
    @JsonSubTypes({
            @JsonSubTypes.Type(value = Animal.class, name = "Animal"),
            @JsonSubTypes.Type(value = Fact.class, name = "Fact"),
    })
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public interface AnimalTreeNode {
        public AnimalTreeNode getParent();
        public AnimalTreeNode getLeft();
        public AnimalTreeNode getRight();

        public void setParent(AnimalTreeNode parent);
        public void setLeft(AnimalTreeNode left);
        public void setRight(AnimalTreeNode right);
    }
  learner_created: true
- name: src/animals/AnimalTree.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.annotation.JsonInclude;

    import java.io.Serializable;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    public class AnimalTree implements Serializable {
        AnimalTreeNode root;

        public AnimalTree() {
            root = null;
        }

        public AnimalTree (AnimalTreeNode root) {
            this.root = root;
        }
    }
  learner_created: true
- name: test/file-formats.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test file formats: JSON, YAML, XML.
    #
    ---
    - [start, "-type {0}"]
    - [contains, "?", "The program should asks the user for a favourite animal"]
    - [input, cat]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - [input, "1"]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The first game started
    #
    - - contains
      - Is it a cat?
      - The program should asks the user is it the cat
    - [input, no]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes
      - The program should ask a question to distinguishes a dog from a cat
    - [input, It can climbs tree]
    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, No]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, Yes]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The second game started
    #
    - - contains
      - Can it climbs tree?
      - The only question in the knowledge tree should be "Can it climbs tree?"
    - [input, Yes]
    - - contains
      - Is it a cat?
      - The program doesn't print the expected message
    - [input, No]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - - input
      - a lynx
    - - input
      - It is living in the forest
    - - contains
      - Is the statement correct for a lynx?
      - The program doesn't print the expected message
    - [input, yes]
    - [input, no]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*0.*Exit.*
      - The program should print the menu after the user leave the game
    - - input
      - "0"
    - - finish
      - The program should finish when user select 0. Exit

    - - file exists
      - "animals.{0}"
      - "The program should save knowledge tree to animals.{0} file."

    #
    # Start the program again and load the Knowledge Tree
    #
    - - start
      - "-type {0}"
    - - not contains
      - Which animal do you like most?
      - If knowledge base is exist the program should not asks the user for a favourite animal
    - - contains
      - Welcome to the animal
      - The program doesn't print the expected message
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - - input
      - "0"
    - - finish
      - The program should finish when user refuse the new game
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."
  learner_created: false
- name: test/menu.script.yaml
  visible: false
  text: |
    ---
    - [start]
    - [input, "{0}"]  # Favourite animal
    - [input, "1"]    # Play the game
    - [input, ""]     # Press Enter
    - [input, "{1}"]  # Play and fill the knowledge tree
    #
    # After filling the tree, we can test all the menu items.
    #
    - - matches
      - "(?is).*1.*Play.*List.*Search.*Calc.*Print.*Exit.*"
      - The program should print the menu

    #
    # 2. List of all animals
    #
    - [input, "2"]
    - [matches, "{2}", The program should print a list of all animals in alphabetical order.]

    #
    # 3. Search for an animal
    #
    - [input, "3"]
    - [contains, "Enter the animal", The program should ask for an animals to search.]
    - [input, "{3}"]
    - [matches, "{4}", The program should print facts about the animal]

    #
    # 4. Knowledge Tree stats
    #
    - [input, "4"]
    - [contains, "The Knowledge Tree stats", The program should print title for statistics]
    - [matches, "(?is).*root node.*{5}.*", "The root node should be {5}"]
    - [matches, "(?is).*number of nodes[^\\\\R]*{6}.*", "The total number of nodes should be {6}"]
    - [matches, "(?is).*number of animals[^\\\\R]*{7}.*", "The total number of animals should be {7}"]
    - [matches, "(?is).*number of statements[^\\\\R]*{8}.*", "The total number of statements should be {8}"]
    - [matches, "(?is).*height of the tree[^\\\\R]*{9}.*", "The height of the tree should be {9}"]
    - [matches, "(?is).*minimum[^\\\\R]*{10}.*", "The minimum depth should be {10}"]
    - [matches, "(?is).*average[^\\\\R]*{11}.*", "The average depth should be {11}"]
  learner_created: false
- name: test/file-formats.data.yaml
  visible: false
  text: |-
    ---
    - - json
    - - xml
    - - yaml
  learner_created: false
- name: test/menu.data.yaml
  visible: false
  text: |-
    ---
    #
    # Test case #1
    #
    - - cat
      - |
        no
        shark
        it is a mammal
        no
        yes

        yes
        no
        fox
        it is living in the forest
        yes
        yes

        yes
        no
        no
        dog
        it can climb trees
        no
        yes

        yes
        yes
        no
        wolf
        it has a long bushy tail
        no
        yes

        yes
        yes
        no
        no
        hare
        it is a shy animal
        yes
        no

      #
      # 2. List of all animals
      #
      - "(?si).*cat.*dog.*hare.*shark.*wolf.*"

      #
      # 3. Search for an animal
      #
      - wolf
      - "(?si).*is a mammal.*doesn't have a long bushy tail.*isn't a shy animal.*"

      #
      # Data for the Knowledge Tree statistics
      #
      - It is a mammal
      - "11"
      - "6"
      - "5"
      - "4"
      - "1"
      - "3"
  learner_created: false
- name: src/resources.zip
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11083#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 16 May 2022 20:53:42 UTC
record: 5
