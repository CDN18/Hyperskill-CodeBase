type: edu
custom_name: Ĉu ĝi estas la kato?
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.File;
    import java.io.IOException;
    import java.util.Locale;
    import java.util.stream.Stream;

    public class GuessAnimalTest extends StageTest<String> {

        String[] languages = new String[]{"en", "eo"};

        @DynamicTest(data = "languages")
        CheckResult testLanguages(final String language) throws IOException {
            final var fileName = "animals" + ("en".equals(language) ? "." : "_" + language + ".");

            final var locale = Locale.getDefault();
            final var systemLanguage = System.getProperty("user.language");
            Locale.setDefault(new Locale(language));
            System.setProperty("user.language", language);

            deleteFiles(fileName);
            final var result = new Scenario(language).check();
            deleteFiles(fileName);

            Locale.setDefault(locale);
            System.setProperty("user.language", systemLanguage);

            return result;
        }

        private void deleteFiles(String fileName) {
            Stream.of("yaml", "json", "xml")
                    .map(fileName::concat)
                    .map(File::new)
                    .filter(File::exists)
                    .forEach(File::delete);
        }
    }
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim().toLowerCase();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim().toLowerCase();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/Corpus.java
  visible: true
  text: |
    package animals;

    import java.util.List;

    public class Corpus {

        // Greetings and goodbyes

        static List<String> morningGreetings = List.of(
                "Good morning!", "Top of the morning to you!",
                "Morning!"
        );

        static List<String> afternoonGreetings = List.of(
                "Good afternoon!", "Afternoon!"
        );

        static List<String> eveningGreetings = List.of(
                "Good evening!", "Evening!"
        );

        static List<String> earlyMorningGreetings = List.of(
                "Good early morning!", "Early morning!",
                "Morning, early bird!"
        );

        static List<String> lateNightGreetings = List.of(
                "Hi, Night Owl!"
        );

        static List<String> goodbye = List.of(
                "Goodbye!", "See you later!", "Bye!",
                "Have a good day!", "See you soon!"
        );


        // Questions and answers

        static List<String> positiveResponse = List.of(
                "y", "yes", "yeah", "yep", "sure", "right",
                "affirmative", "correct", "indeed", "you bet", "exactly",
                "you said it", "you're right"
        );

        static List<String> negativeResponse = List.of(
                "n", "no", "no way", "nah", "nope",
                "negative", "I don't think so", "yeah no", "you're wrong", "you said it wrong"
        );

        static List<String> askToClarify = List.of(
                "I'm not sure I caught you: was it yes or no?",
                "Funny, I still don't understand, is it yes or no?",
                "Oh, it's too complicated for me: just tell me yes or no.",
                "Could you please simply say yes or no?",
                "Oh, no, don't try to confuse me: say yes or no."
        );

        // Reply
        static List<String> positiveReply = List.of(
                "Wonderful!", "Nice!", "Great!", "Good!");

        static List<String> negativeReply = List.of("I give up.");

        //Methods

        public static String getCorpus(List<String> list) {
            return list.get((int) (Math.random() * list.size()));
        }

        public static String getCorpus(List<String> list, int index) {
            return list.get(index);
        }

    }
  learner_created: true
- name: src/animals/Animal.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonTypeName;

    import java.io.Serializable;
    import java.util.Comparator;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonTypeName("Animal")
    public class Animal implements AnimalTreeNode, Serializable {
        String name;
        String undefinedArticle;
        // Fact fact;
        boolean factIsTrue;

        AnimalTreeNode leftChild;
        AnimalTreeNode rightChild;

        public Animal(String nameInput) {
            nameInput = nameInput.strip().toLowerCase();
            this.name = parseAnimal(nameInput).split(" ")[1];
            this.undefinedArticle = parseAnimal(nameInput).split(" ")[0];
            // this.fact = new Fact();
        }

        public Animal() {
        }

        /*
        public void setFact(Fact fact) {
            this.fact = fact;
        }
         */

        static String parseAnimal(String input) {
            if (input.startsWith("a ") || input.startsWith("an ")) {
                return input;
            }
            if (input.startsWith("the ")) {
                input = input.replaceFirst("the ", "");
            }
            boolean startWithVowel = String.valueOf(input.charAt(0)).matches("[aeiou]");
            String undefinedArticle = startWithVowel ? "an" : "a";
            return undefinedArticle + " " + input;
        }

        @Override
        public String toString() {
            return this.undefinedArticle + " " + this.name;
        }


        @Override @JsonIgnore
        public AnimalTreeNode getLeft() {
            return leftChild;
        }

        @Override @JsonIgnore
        public AnimalTreeNode getRight() {
            return rightChild;
        }

        @Override
        public void setLeft(AnimalTreeNode left) {
            this.leftChild = left;
        }

        @Override
        public void setRight(AnimalTreeNode right) {
            this.rightChild = right;
        }
    }

    class AnimalComparator implements Comparator<Animal> {
        @Override
        public int compare(Animal animal1, Animal animal2) {
            return animal1.name.compareTo(animal2.name);
        }
    }
  learner_created: true
- name: src/animals/Fact.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonTypeName;

    import javax.xml.namespace.QName;
    import java.io.Serializable;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonTypeName("Fact")
    public class Fact implements AnimalTreeNode, Serializable {
        String fact;
        String predicate;

        AnimalTreeNode leftChild; //The fact is false
        AnimalTreeNode rightChild; // The fact is true

        public Fact(String factString) {
            this.fact = turnFactToTrue(factString);
            Pattern predicatePattern = Pattern.compile("(can|has|is)");
            Matcher predicateMatcher = predicatePattern.matcher(fact);
            this.predicate = predicateMatcher.find() ? predicateMatcher.group() : "";
            // this.factIsTrue = factString.contains(this.predicate);
        }

        public Fact() {
        }

        @JsonIgnore
        public String getPredicateNegation() {
            switch (predicate) {
                case "can":
                    return  "can't";
                case "has":
                    return "doesn't have";
                case "is":
                    return "isn't";
                default:
                    return "";
            }
        }

        @JsonIgnore
        public String getFactNegation() {
            return this.fact.replaceFirst(this.predicate, getPredicateNegation());
        }

        static String turnFactToTrue(String fact) {
            String trueFact = fact.strip();
            if (fact.contains("isn't") || fact.contains("is not")) {
                trueFact = fact.replaceFirst("isn't", "is").replaceFirst("is not", "is");
            }
            if (fact.contains("can't") || fact.contains("can not")) {
                trueFact = fact.replaceFirst("can't", "can").replaceFirst("can not", "can");
            }
            if (fact.contains("don't have") || fact.contains("doesn't have") ||
                    fact.contains("have not") || fact.contains("has not")) {
                trueFact = fact.replaceFirst("(don't|doesn't|do not|does not) have", "have")
                        .replaceFirst("have not", "have").replaceFirst("has not", "has");
            }
            return trueFact;
        }

        @JsonIgnore
        public String getFactPhrase() {
            return fact.replaceFirst("It (can|has|is)", "").strip();
        }

        @Override @JsonIgnore
        public AnimalTreeNode getLeft() {
            return this.leftChild;
        }

        @Override @JsonIgnore
        public AnimalTreeNode getRight() {
            return this.rightChild;
        }

        @Override
        public void setLeft(AnimalTreeNode left) {
            this.leftChild = left;
        }

        @Override
        public void setRight(AnimalTreeNode right) {
            this.rightChild = right;
        }

        @Override
        public String toString() {
            return this.fact;
        }
    }
  learner_created: true
- name: src/animals/AnimalTreeNode.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonSubTypes;
    import com.fasterxml.jackson.annotation.JsonTypeInfo;

    @JsonTypeInfo( use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
    @JsonSubTypes({
            @JsonSubTypes.Type(value = Animal.class, name = "Animal"),
            @JsonSubTypes.Type(value = Fact.class, name = "Fact"),
    })
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public interface AnimalTreeNode {
        public AnimalTreeNode getLeft();
        public AnimalTreeNode getRight();

        public void setLeft(AnimalTreeNode left);
        public void setRight(AnimalTreeNode right);
    }
  learner_created: true
- name: src/animals/AnimalTree.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.annotation.JsonInclude;

    import java.io.Serializable;
    import java.util.*;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    public class AnimalTree implements Serializable {
        AnimalTreeNode root;

        public AnimalTree() {
            root = null;
        }

        public AnimalTree (AnimalTreeNode root) {
            this.root = root;
        }

        public int getNumberOfNodes() {
            return getNumberOfNodes(root);
        }
        private int getNumberOfNodes(AnimalTreeNode node) {
            if (node == null) {
                return 0;
            }
            return 1 + getNumberOfNodes(node.getLeft()) + getNumberOfNodes(node.getRight());
        }

        public int getNumberOfAnimals() {
            return getNumberOfAnimals(root);
        }
        private int getNumberOfAnimals(AnimalTreeNode node) {
            if (node == null) {
                return 0;
            }
            if (node.getLeft() == null && node.getRight() == null) {
                return 1;
            }
            return getNumberOfAnimals(node.getLeft()) + getNumberOfAnimals(node.getRight());
        }

        public int getHeight() {
            return Math.max(getHeight(root) - 1, 0);
        }
        private int getHeight(AnimalTreeNode node) {
            if (node == null) {
                return 0;
            }
            return 1 + Math.max(getHeight(node.getLeft()), getHeight(node.getRight()));
        }

        public int getMinDepth() {
            return Math.max(getMinDepth(root) - 1, 0);
        }
        private int getMinDepth(AnimalTreeNode node) {
            if (node == null) {
                return 0;
            }
            if (node.getLeft() == null && node.getRight() == null) {
                return 1;
            }
            return 1 + Math.min(getMinDepth(node.getLeft()), getMinDepth(node.getRight()));
        }

        public double getAvgLeafDepth() {
            int leafNumber = getNumberOfAnimals();
            List<Animal> leaves = new ArrayList<>();
            getLeaves(root, leaves);
            int[] depths = new int[leafNumber];
            for (int i = 0; i < leafNumber; i++) {
                depths[i] = getDepth(leaves.get(i));
            }
            return Arrays.stream(depths).average().orElse(0.0);
        }
        private void getLeaves(AnimalTreeNode currentNode, List<Animal> leaves) {
            if (currentNode == null) {
                return;
            }
            if (currentNode.getLeft() == null && currentNode.getRight() == null && currentNode.getClass() == Animal.class) {
                leaves.add((Animal) currentNode);
            }
            getLeaves(currentNode.getLeft(), leaves);
            getLeaves(currentNode.getRight(), leaves);
        }

        private int getDepth(AnimalTreeNode node) {
            if (node == null) {
                return 0;
            }
            if (node.getLeft() == null && node.getRight() == null) {
                return 1;
            }
            return 1 + Math.max(getDepth(node.getLeft()), getDepth(node.getRight()));
        }

        Animal findAnimal(String animalName) {
            if (root == null) {
                return null;
            }
            Deque<AnimalTreeNode> stack = new ArrayDeque<>();
            stack.push(root);
            while (!stack.isEmpty()) {
                AnimalTreeNode currentNode = stack.pop();
                if (currentNode.getClass() == Animal.class) {
                    if(((Animal) currentNode).name.equals(animalName)) {
                        return (Animal) currentNode;
                    }
                } else {
                    if (currentNode.getLeft() != null) {
                        stack.push(currentNode.getLeft());
                    }
                    if (currentNode.getRight() != null) {
                        stack.push(currentNode.getRight());
                    }
                }
            }
            return null;
        }

        public void printTree() {
            System.out.println();
            final String rootSymbol = "└";
            final String leftSymbol = "├";
            final String rightSymbol = "└";
            final String depthSymbol = "│";
            Deque<AnimalTreeNode> treeNodeQueue = new ArrayDeque<>();
            if (root == null) {
                return;
            }
            treeNodeQueue.push(root);
            StringBuilder normalNodePrefix = new StringBuilder();
            while (!treeNodeQueue.isEmpty()) {
                AnimalTreeNode currentNode = treeNodeQueue.pop();
                System.out.print(" ");
                String data = currentNode.getClass() == Animal.class ?
                        ((Animal) currentNode).name : Main.generateInterrogator(((Fact) currentNode).predicate) + " " + ((Fact) currentNode).getFactPhrase() + "?";
                if (currentNode == root) {
                    System.out.println(rootSymbol + " " + data);
                } else {
                    System.out.print(" " + normalNodePrefix);
                    if (isLeft(currentNode)) {
                        System.out.println(leftSymbol + " " + data);
                        if (currentNode.getLeft() != null || currentNode.getRight() != null) {
                            normalNodePrefix.append(depthSymbol);
                        }
                    }
                    if (isRight(currentNode)) {
                        System.out.println(rightSymbol + " " + data);
                        if (currentNode.getLeft() != null || currentNode.getRight() != null) {
                            normalNodePrefix.append(" ");
                        } else {
                            if (normalNodePrefix.length() > 0) {
                                normalNodePrefix.deleteCharAt(normalNodePrefix.length() - 1);
                            }
                        }
                    }
                }
                if (currentNode.getRight() != null) {
                    treeNodeQueue.push(currentNode.getRight());
                }
                if (currentNode.getLeft() != null) {
                    treeNodeQueue.push(currentNode.getLeft());
                }
            }
        }
        private int getDepthFromRoot(AnimalTreeNode node) {
            if (node == null) {
                return 0;
            }
            if (node == root) {
                return 1;
            }
            return 1 + getDepthFromRoot(getParent(node));
        }

        public AnimalTreeNode getParent(AnimalTreeNode node) {
            if (root == null) {
                return null;
            }
            Deque<AnimalTreeNode> treeStack = new ArrayDeque<>();
            treeStack.push(root);
            while (!treeStack.isEmpty()) {
                AnimalTreeNode currentNode = treeStack.pop();
                if (currentNode.getLeft() == node || currentNode.getRight() == node) {
                    return currentNode;
                }
                if (currentNode.getLeft() != null) {
                    treeStack.push(currentNode.getLeft());
                }
                if (currentNode.getRight() != null) {
                    treeStack.push(currentNode.getRight());
                }
            }
            return null;
        }

        public boolean isLeft(AnimalTreeNode node) {
            AnimalTreeNode parent = getParent(node);
            if (parent == null) {
                return false;
            }
            return parent.getLeft() == node;
        }

        public boolean isRight(AnimalTreeNode node) {
            AnimalTreeNode parent = getParent(node);
            if (parent == null) {
                return false;
            }
            return parent.getRight() == node;
        }
    }
  learner_created: true
- name: test/en.script.yaml
  visible: false
  text: |+
    #
    # There is a scenario of parameterized test for English language.
    #
    ---
    - [start, "-type {0}"] # We will test three different file formats: JSON, YAML, XML
    - - contains
      - which animal
      - When no Knwoledge Tree is created yet the program should ask for a favourite animals at first.
    - [input, cat]
    - - contains
      - welcome to the animal
      - After entering the favourite animal the program should welcom the user and represent itself as an expert system

    #
    # Start the menu
    #
    - - matches
      - "(?si).*play.*list.*search.*stat.*print.*exit.*"
      - The program should display the menu

    #
    # Let's play the game!
    #
    - [input, 1]
    - - contains
      - you think of an animal, and i guess it.
      - The program should asks the user to think of an animal
    - - contains
      - press enter
      - The computer should make a pause before the game.
    - [input, ""]

    #
    # After user press Enter the game started!
    #
    - - contains
      - is it a cat?
      - The very first question in the very first game should undoubtedly be about a beloved animal.
    - [input, No] # We think of about other animal, not about the cat
    - - contains
      - i give up
      - If the program cannot guess the animal, it must give up.
    - [input, dog] # Of course, our second animal is a dog!
    - - contains
      - distinguishes
      - The program should find out how one animal differs from another.
    - - input
      - it can climb trees
    - - find
      - is .+ correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, no]

    - - contains
      - "cat can climb trees"
      - The program must generate the correct fact for the first animal.

    - - contains
      - "the dog "
      - The program must generate the correct fact for the second animal.

    - - matches
      - "(?is).*(again|repeat|one more).*"
      - The program should ask the user to play again
    - [input, yes] # Yes, we will play once again
    - [input, ""] # Press ENTER
    - - contains
      - can it climb trees?
      - After the first game, the starting question should be the question of fact.
    - [input, yes]
    - [contains, "is it a cat?", "The program must assume that the animal is a cat."]
    - - input
      - |
        no
        lynx
        it is living in the forest
        yes
        no
    # We finish the game.

    - - matches
      - "(?si).*play.*list.*search.*stat.*print.*exit.*"
      - The program should display the menu

    - [input, "0"] # Exit from the application
    - - matches
      - "(?si).*(bye|later|soon|off|see|!).*"
      - How about to say goodbye to the user?
    - [finish, "The program should finish when user exit"]
    - - file exists
      - "animals.{0}"
      - "The program should save knowledge tree to animals.{0} file."
    #
    # After the first session the program created and save the Knowledge Tree
    # We will run the program again to make sure that all data was saved and restored correctly.
    #
    - [start, "-type {0}"]
    - - not contains
      - which animal do you like most?
      - If the tree of knowledge exists, then the program should not ask the user about his favorite animal.
    - - find
      - welcome to the animal(.s)? expert system
      - The program should immediately greet the user after starting.
    #
    # Start the menu
    #
    - - matches
      - "(?si).*play.*list.*search.*stat.*print.*exit.*"
      - The program should display the menu

    #
    # Let's check which animals are now in our knowledge tree.
    #
    - [input, "2"]
    - - matches
      - (?si).*cat.*dog.*lynx.*
      - The program should print a list of all animals in alphabetical order.

    #
    # Check the facts about the animal
    #
    - [input, "3"]
    - - find
      - enter.* animal
      - The program should ask the user to enter the name of the animal
    - [input, lynx]
    - - contains
      - facts about the lynx
      - The program must find the animal that is in the knowledge tree.
    - - contains
      - it can climb trees
      - The program did not print the first fact about the animal
    - - contains
      - it is living in the forest
      - The program did not print the second fact about the animal

    #
    # Check the knowledge tree statistics
    #
    - [input, "4"]
    - [contains, "knowledge tree", "The header for the table must be printed"]

    - - find
      - (?i)root node.*It can climb trees
      - The root element in our tree must be a statement

    - - find
      - number of nodes.*\b5\b
      - The total number of nodes in the tree is not counted correctly.

    - - find
      - number of animals\D*3\b
      - The total number of animals in the tree is not counted correctly.

    - - find
      - number of statements\D*2\b
      - The total number of animals in the tree is not counted correctly.

    - - find
      - height of the tree\D*2\b
      - The tree depth was calculated incorrectly.

    - - find
      - minimum\D*1\b
      - The minimum tree depth was calculated incorrectly.

    - - find
      - average\D*1[,.]7
      - The average tree depth was calculated incorrectly.

    - [input, "0"] # Exit from the application
    - [finish, "The program should finish when user exit"]
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."


  learner_created: false
- name: test/eo.script.yaml
  visible: false
  text: |+
    #
    # There is a scenario of parameterized test for Esperanto language.
    #
    ---
    - [start, "-type {0}"] # We will test three different file formats: JSON, YAML, XML
    - - contains
      - "kiun beston vi plej ŝatas?"
      - "[Esperanto] When no Knowledge Tree is created yet the program should ask for a favourite animals at first."
    - [input, kato]
    - - contains
      - bonvenon al la sperta sistemo de la besto!
      - "[Esperanto] After entering the favourite animal the program should welcome the user and represent itself as an expert system"

    #
    # Start the menu
    #
    - - matches
      - (?si).*Ludi.*Listo.*Serĉi.*Kalkuli.*Eliri.*
      - "[Esperanto] The program should display the menu"

    #
    # Let's play the game!
    #
    - [input, 1]
    - - contains
      - vi pensu pri besto, kaj mi divenos ĝin.
      - "[Esperanto] The program should asks the user to think of an animal"
    - - contains
      - premu enen kiam vi pretas.
      - "[Esperanto] The computer should make a pause before the game."
    - [input, ""]

    #
    # After user press Enter the game started!
    #
    - - contains
      - ĉu ĝi estas kato?
      - "[Esperanto] The very first question in the very first game should undoubtedly be about a beloved animal."
    - [input, ne] # We think of about other animal, not about the cat
    - - contains
      - mi rezignas. kiun beston vi havas en la kapo?
      - "[Esperanto] If the program cannot guess the animal, it must give up."
    - [input, hundo] # Of course, our second animal is a dog!
    - - contains
      - indiku fakton, kiu distingas kato de hundo
      - "[Esperanto] The program should find out how one animal differs from another."
    - - input
      - ĝi povas surgrimpi arbon
    - - contains
      - ĉu la aserto ĝustas por la hundo?
      - "[Esperanto] The program should clarify if the statement is correct for a dog."
    - [input, ne]

    - - contains
      - la kato povas surgrimpi arbon
      - The program must generate the correct fact for the first animal.

    - - contains
      - la hundo ne povas surgrimpi arbon
      - "[Esperanto] The program must generate the correct fact for the second animal."

    - - matches
      - "(?is).*(denove|ripeti|ankoraŭ).*"
      - "[Esperanto] The program should ask the user to play again"
    - [input, jes] # Yes, we will play once again
    - [input, ""] # Press ENTER
    - - contains
      - povas surgrimpi arbon?
      - "[Esperanto] After the first game, the starting question should be the question of fact."
    - [input, jes]
    - [contains, "ĉu ĝi estas kato?", "[Esperanto] The program must assume that the animal is a cat."]
    - - input
      - |
        ne
        linko
        ĝi loĝas en la arbaro
        jes
        ne
    # We finish the game.
    - - matches
      - (?si).*Ludi.*Listo.*Serĉi.*Kalkuli.*Eliri.*
      - "[Esperanto] The program should display the menu"
    - [input, "0"] # Exit from the application
    - - matches
      - "(?si).*(ĝis|estis).*"
      - "[Esperanto] How about to say goodbye to the user?"
    - [finish, "The program should finish when user exit"]
    - - file exists
      - "animals_eo.{0}"
      - "The program should save knowledge tree to animals_eo.{0} file."
    #
    # After the first session the program created and save the Knowledge Tree
    # We will run the program again to make sure that all data was saved and restored correctly.
    #
    - [start, "-type {0}"]
    - - not contains
      - kiun beston vi plej ŝatas?
      - "[Esperanto] If the tree of knowledge exists, then the program should not ask the user about his favorite animal."
    - - contains
      - bonvenon al la sperta sistemo de la besto!
      - "[Esperanto] The program should immediately greet the user after starting."
    - - matches
      - (?si).*Ludi.*Listo.*Serĉi.*Kalkuli.*Eliri.*
      - "[Esperanto] The program should display the menu"

    #
    # Let's check which animals are now in our knowledge tree.
    #
    - [input, "2"]
    - - matches
      - (?si).*hundo.*kato.*linko.*
      - "[Esperanto] The program should print a list of all animals in alphabetical order."

    #
    # Check the facts about the animal
    #
    - [input, "3"]
    - - find
      - enigu .* besto
      - "[Esperanto] The program should ask the user to enter the name of the animal"
    - [input, linko]
    - - contains
      - faktoj pri la linko
      - "[Esperanto] The program must find the animal that is in the knowledge tree."
    - - contains
      - ĝi povas surgrimpi arbon
      - "[Esperanto] The program did not print the first fact about the animal"
    - - contains
      - ĝi loĝas en la arbaro
      - "[Esperanto] The program did not print the second fact about the animal"

    #
    # Check the knowledge tree statistics
    #
    - [input, "4"]
    - [contains, "la statistiko", "The header for the table must be printed"]

    - - matches
      - (?is).*radika nodo.*povas surgrimpi arbon.*
      - "[Esperanto] The root element in our tree must be a statement"

    - - matches
      - (?is).*nombro de nodoj[^\\R]*5.*
      - "[Esperanto] The total number of nodes in the tree is not counted correctly."

    - - matches
      - (?is).*nombro de bestoj[^\\R]*3.*
      - "[Esperanto] The total number of animals in the tree is not counted correctly."

    - - matches
      - (?is).*nombro de deklaroj[^\\R]*2.*
      - "[Esperanto] The total number of animals in the tree is not counted correctly."

    - - matches
      - (?is).*alteco de la arbo[^\\R]*2.*
      - "[Esperanto] The tree depth was calculated incorrectly."

    - - matches
      - (?is).*minimuma profundo[^\\R]*1.*
      - "[Esperanto] The minimum tree depth was calculated incorrectly."

    - - matches
      - (?is).*averaĝa profundo[^\\R]*1[,.]7.*
      - "[Esperanto] The average tree depth was calculated incorrectly."

    - [input, "0"] # Exit from the application
    - [finish, "The program should finish when user exit"]
    - - file delete
      - "animals_eo.{0}"
      - "[Esperanto] The test can't delete animals_eo.{0} file."


  learner_created: false
- name: test/en.data.yaml
  visible: false
  text: |-
    ---
    - - yaml
    - - json
    - - xml
  learner_created: false
- name: test/eo.data.yaml
  visible: false
  text: |-
    ---
    - - yaml
    - - json
    - - xml
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/11084#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 17 May 2022 07:00:34 UTC
record: 6
