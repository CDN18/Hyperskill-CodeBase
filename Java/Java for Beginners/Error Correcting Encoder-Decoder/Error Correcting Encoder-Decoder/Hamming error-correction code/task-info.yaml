type: edu
custom_name: stage5
files:
- name: src/correcter/Main.java
  visible: true
  text: |
    package correcter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CorrecterTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.util.ArrayList;
    import java.util.List;

    class TestClue {
        String input;
        String fileContent;

        TestClue(String input, String fileContent) {
            this.input = input;
            this.fileContent = fileContent;
        }
    }

    public class CorrecterTest extends StageTest<TestClue> {

        private static File received = null;
        private static File encoded = null;
        private static File decoded = null;

        @Override
        public List<TestCase<TestClue>> generate() {
            TestClue[] testClues = new TestClue[]{
                new TestClue("encode", "Eat more of these french buns!"),
                new TestClue("send",   "Eat more of these french buns!"),
                new TestClue("decode", "Eat more of these french buns!"),

                new TestClue("encode", "$ome rand0m messAge"),
                new TestClue("send",   "$ome rand0m messAge"),
                new TestClue("decode", "$ome rand0m messAge"),

                new TestClue("encode", "better call Saul 555-00-73!"),
                new TestClue("send",   "better call Saul 555-00-73!"),
                new TestClue("decode", "better call Saul 555-00-73!"),

                new TestClue("encode", "5548172 6548 225147 23656595 5155"),
                new TestClue("send",   "5548172 6548 225147 23656595 5155"),
                new TestClue("decode", "5548172 6548 225147 23656595 5155"),
            };

            List<TestCase<TestClue>> result = new ArrayList<>();

            for (int i = 0; i < testClues.length; i++) {
                result.add(new TestCase<TestClue>()
                    .setAttach(testClues[i])
                    .setInput(testClues[i].input)
                    .addFile("send.txt", testClues[i].fileContent));
            }

            return result;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String path = System.getProperty("user.dir");

            received = null;
            encoded = null;
            decoded = null;

            searchReceived();
            searchEncoded();
            searchDecoded();

            String correctFileBinary = toBinary(clue.fileContent.getBytes());
            String correctFileEncoded = encodeFile(correctFileBinary);

            String action = clue.input;

            if (action.equals("encode")) {

                if (encoded == null) {
                    return new CheckResult(false,
                        "Can't find encoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] encodedContent;
                FileInputStream encodedStream;

                try {
                    encodedStream = new FileInputStream(encoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    encodedContent = encodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String encodedBinary = toBinary(encodedContent);

                return new CheckResult(encodedBinary.equals(correctFileEncoded));
            }

            if (action.equals("send")) {

                if (received == null) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it " +
                            "down or make sure the name of file is correct.");
                }

                byte[] receivedContent;

                FileInputStream receivedStream;

                try {
                    receivedStream = new FileInputStream(received);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    receivedContent = receivedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String receivedBinary = toBinary(receivedContent);


                return checkDifference(receivedBinary, correctFileEncoded);
            }



            if (action.equals("decode")) {

                if (decoded == null) {
                    return new CheckResult(false,
                        "Can't find decoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] decodedContent;


                FileInputStream decodedStream;

                try {
                    decodedStream = new FileInputStream(decoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    decodedContent = decodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String decodedBinary = toBinary(decodedContent);

                if (!decodedBinary.equals(correctFileBinary)) {
                    return new CheckResult(false, "The decoded text must match initial text!");
                }

                return CheckResult.correct();
            }

            throw new RuntimeException("Can't check the program");
        }

        private static String toBinary(byte[] bytes) {
            StringBuilder sb = new StringBuilder(bytes.length * Byte.SIZE);
            for (int i = 0; i < Byte.SIZE * bytes.length; i++) {
                sb.append((bytes[i / Byte.SIZE] << i % Byte.SIZE & 0x80) == 0 ? '0' : '1');
            }
            return sb.toString();
        }

        private static byte[] fromBinary(String s) {
            int sLen = s.length();
            byte[] toReturn = new byte[(sLen + Byte.SIZE - 1) / Byte.SIZE];
            char c;
            for (int i = 0; i < sLen; i++)
                if ((c = s.charAt(i)) == '1')
                    toReturn[i / Byte.SIZE] = (byte) (toReturn[i / Byte.SIZE] | (0x80 >>> (i % Byte.SIZE)));
                else if (c != '0')
                    throw new IllegalArgumentException();
            return toReturn;
        }

        private static void searchReceived() {
            File file = new File("received.txt");
            if (file.exists()) {
                received = file;
            }
        }

        private static void searchEncoded() {
            File file = new File("encoded.txt");
            if (file.exists()) {
                encoded = file;
            }
        }

        private static void searchDecoded() {
            File file = new File("decoded.txt");
            if (file.exists()) {
                decoded = file;
            }
        }

        private String encodeFile(String binaryString) {

            String encoded = "";

            for (int i = 0; i < binaryString.length(); i += 4) {

                if (i + 4 > binaryString.length()) {
                    throw new RuntimeException("Can't decode binary data");
                }

                int startSubIndex = i;
                int stopSubIndex = i + 4;

                String currSub = binaryString.substring(startSubIndex, stopSubIndex);

                String encodedPart;

                int parityBit1 = 0;
                int parityBit2 = 0;
                int parityBit4 = 0;

                if (currSub.charAt(0) == '1') {
                    parityBit1++;
                    parityBit2++;
                }

                if (currSub.charAt(1) == '1') {
                    parityBit1++;
                    parityBit4++;
                }

                if (currSub.charAt(2) == '1') {
                    parityBit2++;
                    parityBit4++;
                }

                if (currSub.charAt(3) == '1') {
                    parityBit1++;
                    parityBit2++;
                    parityBit4++;
                }

                encodedPart =
                    (parityBit1 % 2 == 1? "1": "0") +
                        (parityBit2 % 2 == 1? "1": "0") +
                        currSub.charAt(0) +
                        (parityBit4 % 2 == 1? "1": "0") +
                        currSub.charAt(1) +
                        currSub.charAt(2) +
                        currSub.charAt(3) +
                        "0";

                encoded += encodedPart;
            }

            return encoded;
        }

        private CheckResult checkDifference(String output, String correct) {
            if (output.isEmpty() && correct.isEmpty()) return CheckResult.correct();

            if (output.length() != correct.length()) {
                return new CheckResult(false,
                    "The program was expected to output " +
                        correct.length() / 8 +
                        " bytes, but output " +
                        output.length() / 8);
            }

            for (int i = 0; i < output.length(); i += 8) {
                String currOutputByte = output.substring(i, i+8);
                String currCorrectByte = correct.substring(i, i+8);

                int difference = 0;
                for (int j = 0; j < currCorrectByte.length(); j++) {
                    char currOutputBit = currOutputByte.charAt(j);
                    char currCorrectBit = currCorrectByte.charAt(j);

                    if (currCorrectBit != currOutputBit) {
                        difference++;
                    }
                }

                if (difference == 0) {
                    return new CheckResult(false,
                        "One of bytes from the input stayed the same but should be changed");
                }

                if (difference != 1) {
                    return new CheckResult(false,
                        "One of bytes from the input was changes in more than one bit");
                }
            }

            return CheckResult.correct();
        }
    }

  learner_created: false
- name: encoded.txt
  visible: true
  text: "\x0f�3<3���\x0f�\0<\0���\x0f��3\0\0��\x0f�3<3\0�\0\x0f\0\0<\x0f\0�3\x0f�\
    3<\0���\x0f��3\0\0�3\x0f��<<\0��\x0f��<3��\x0f\x0f�33\0\0��\x0f�3<3���"
  learner_created: true
- name: received.txt
  visible: true
  text: "\v�\x1341���\v�\x1c\bC�\a\x83#\b��\x0e�2,\x13@�\x04�\b\b|\n �;Oȳ,\x04�pC\n\
    ��1  �\x13\n°|8\x01��\x0e��\x1c7C�\x0e/�1�  �͏�s>����"
  learner_created: true
- name: src/correcter/OldCodes.md
  visible: true
  text: |-
    # Codes before stage 3
    ```java
    package correcter;

    import java.util.Random;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            final StringBuilder dictionary = new StringBuilder("aAbBcCdDeEfFgGhHiIjJkKlL" +
                    "mMnNoOpPqQrRsStTuUvVwWxXyYzZ 0123456789");
            Scanner scanner = new Scanner(System.in);
            String originalInput = scanner.nextLine();
            System.out.println(originalInput);
            StringBuilder input = new StringBuilder();
            final int times = 3;
            for (char text : originalInput.toCharArray()) {
                input.append(String.valueOf(text).repeat(times));
            }
            System.out.println(input);
            Random generator = new Random();
            for (int i = 0; i < input.length(); i += 3) {
                int index = i + generator.nextInt(3); // Index of the char to be changed
                int original = dictionary.indexOf(String.valueOf(input.charAt(index))); // Find the char in the dictionary
                int distorted = (original + generator.nextInt()) % dictionary.length();
                distorted = Math.abs(distorted);
                while (original == distorted) {
                    distorted = (original + generator.nextInt()) % dictionary.length();
                    distorted = Math.abs(distorted);
                } // Make sure that the distorted char is different from the original one
                input.setCharAt(index, dictionary.charAt(distorted));
            }
            System.out.println(input);
            StringBuilder output = new StringBuilder();
            for (int i = 0; i < input.length(); i += 3) {
                String text = input.substring(i, i + 3);
                boolean pair1 = text.substring(0, 1).equals(text.substring(1, 2));
                boolean pair2 = text.substring(0, 1).equals(text.substring(2, 3));
                if (pair1 || pair2) {
                    output.append(text.charAt(0));
                } else {
                    output.append(text.charAt(1));
                }
            }
            System.out.println(output);
        }
    }

    ```

    # Codes before stage 4

    ```java
    package correcter;

    import java.io.*;
    import java.nio.file.FileSystemNotFoundException;
    import java.util.Random;

    public class Main {
        public static void main(String[] args) {
            try (FileInputStream send = new FileInputStream("send.txt")) {
                BufferedInputStream inputBuffer = new BufferedInputStream(send);
                ByteArrayOutputStream outputBuffer = new ByteArrayOutputStream();
                byte currentByte = (byte) inputBuffer.read();
                Random generator = new Random();
                while (currentByte != -1) {
                    int index = generator.nextInt(Byte.SIZE);
                    byte upper = (byte) (currentByte >>> (index + 1) << (index + 1));
                    int lowerTemp = (currentByte << (Byte.SIZE - index)) & 0xff;
                    byte lower = (byte) (lowerTemp >>> (Byte.SIZE - index));
                    byte current = (byte) ((currentByte >>> (index)) & 0xff);
                    current = (byte) ((current << (Byte.SIZE - 1)) & 0xff);
                    current = (byte) ((current >>> (Byte.SIZE - index - 1)) & 0xff);
                    current = (byte) (current == 0 ? 1 : 0);
                    current = (byte) (current << index);
                    byte newByte = (byte) (upper + lower + current);
                    outputBuffer.write(newByte);
                    currentByte = (byte) inputBuffer.read();
                }
                try (FileOutputStream receive = new FileOutputStream("received.txt")) {
                    receive.write(outputBuffer.toByteArray());
                }
            } catch (FileSystemNotFoundException | IOException fnf) {
                throw new RuntimeException(fnf);
            }

        }
    }

    ```
  learner_created: true
- name: decoded.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5458#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 19 Apr 2022 16:27:20 UTC
record: -1
